/*
  # Add Crochet Shop System

  1. New Tables
    - `user_collectibles` - tracks user's collectible inventory and selected items
    - `collectibles` - master list of all available collectibles
    - `embroidered_boxes` - tracks daily box claims and purchases

  2. Updates to Existing Tables
    - Add `sheep_gems` and `last_gem_claim` to `user_currency`

  3. Security
    - Enable RLS on all new tables
    - Add policies for authenticated users to manage their own data
*/

-- Add sheep gems to user_currency table
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'user_currency' AND column_name = 'sheep_gems'
  ) THEN
    ALTER TABLE user_currency ADD COLUMN sheep_gems integer DEFAULT 0;
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'user_currency' AND column_name = 'last_gem_claim'
  ) THEN
    ALTER TABLE user_currency ADD COLUMN last_gem_claim timestamp with time zone DEFAULT NULL;
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'user_currency' AND column_name = 'selected_sheep_emoji'
  ) THEN
    ALTER TABLE user_currency ADD COLUMN selected_sheep_emoji text DEFAULT 'üêë';
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'user_currency' AND column_name = 'selected_particle'
  ) THEN
    ALTER TABLE user_currency ADD COLUMN selected_particle text DEFAULT '‚úß';
  END IF;
END $$;

-- Create collectibles master table
CREATE TABLE IF NOT EXISTS collectibles (
  id text PRIMARY KEY,
  name text NOT NULL,
  emoji text NOT NULL,
  type text NOT NULL CHECK (type IN ('sheep_emoji', 'particle')),
  rarity text NOT NULL CHECK (rarity IN ('free', 'normal', 'epic', 'legendary')),
  gem_cost integer DEFAULT 0,
  created_at timestamptz DEFAULT now()
);

-- Create user collectibles table
CREATE TABLE IF NOT EXISTS user_collectibles (
  user_id uuid REFERENCES users(id) ON DELETE CASCADE,
  collectible_id text REFERENCES collectibles(id) ON DELETE CASCADE,
  obtained_at timestamptz DEFAULT now(),
  obtained_from text DEFAULT 'purchase' CHECK (obtained_from IN ('purchase', 'box', 'free')),
  PRIMARY KEY (user_id, collectible_id)
);

-- Create embroidered boxes tracking table
CREATE TABLE IF NOT EXISTS embroidered_boxes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES users(id) ON DELETE CASCADE,
  box_type text NOT NULL CHECK (box_type IN ('daily', 'purchased')),
  opened_at timestamptz DEFAULT now(),
  reward_type text NOT NULL CHECK (reward_type IN ('coins', 'gems', 'collectible')),
  reward_amount integer DEFAULT 0,
  reward_collectible_id text REFERENCES collectibles(id),
  created_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE collectibles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_collectibles ENABLE ROW LEVEL SECURITY;
ALTER TABLE embroidered_boxes ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Anyone can read collectibles"
  ON collectibles
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Users can read own collectibles"
  ON user_collectibles
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Users can insert own collectibles"
  ON user_collectibles
  FOR INSERT
  TO public
  WITH CHECK (true);

CREATE POLICY "Users can read own boxes"
  ON embroidered_boxes
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Users can insert own boxes"
  ON embroidered_boxes
  FOR INSERT
  TO public
  WITH CHECK (true);

-- Insert all collectibles
INSERT INTO collectibles (id, name, emoji, type, rarity, gem_cost) VALUES
-- Free sheep emojis
('sheep_sheep', 'Sheep', 'üêë', 'sheep_emoji', 'free', 0),
('sheep_chick', 'Chick', 'üê•', 'sheep_emoji', 'free', 0),

-- Normal sheep emojis (20 gems)
('sheep_cat', 'Cat', 'üêà', 'sheep_emoji', 'normal', 20),
('sheep_squirrel', 'Squirrel', 'üêøÔ∏è', 'sheep_emoji', 'normal', 20),
('sheep_otter', 'Otter', 'ü¶¶', 'sheep_emoji', 'normal', 20),
('sheep_hedgehog', 'Hedgehog', 'ü¶î', 'sheep_emoji', 'normal', 20),
('sheep_sloth', 'Sloth', 'ü¶•', 'sheep_emoji', 'normal', 20),
('sheep_owl', 'Owl', 'ü¶â', 'sheep_emoji', 'normal', 20),
('sheep_horse', 'Horse', 'üêé', 'sheep_emoji', 'normal', 20),
('sheep_dog', 'Dog', 'üêï', 'sheep_emoji', 'normal', 20),
('sheep_beaver', 'Beaver', 'ü¶´', 'sheep_emoji', 'normal', 20),
('sheep_goat', 'Goat', 'üêê', 'sheep_emoji', 'normal', 20),

-- Normal sheep emojis (50 gems)
('sheep_dolphin', 'Dolphin', 'üê¨', 'sheep_emoji', 'normal', 50),
('sheep_fish', 'Fish', 'üêü', 'sheep_emoji', 'normal', 50),
('sheep_jellyfish', 'Jellyfish', 'ü™º', 'sheep_emoji', 'normal', 50),
('sheep_whale', 'Whale', 'üê≥', 'sheep_emoji', 'normal', 50),
('sheep_swan', 'Swan', 'ü¶¢', 'sheep_emoji', 'normal', 50),
('sheep_tropical_fish', 'Tropical Fish', 'üê†', 'sheep_emoji', 'normal', 50),
('sheep_shell', 'Shell', 'üêö', 'sheep_emoji', 'normal', 50),
('sheep_squid', 'Squid', 'ü¶ë', 'sheep_emoji', 'normal', 50),
('sheep_duck', 'Duck', 'ü¶Ü', 'sheep_emoji', 'normal', 50),
('sheep_flamingo', 'Flamingo', 'ü¶©', 'sheep_emoji', 'normal', 50),

-- Normal sheep emojis (70 gems)
('sheep_dragon', 'Dragon', 'üêâ', 'sheep_emoji', 'normal', 70),
('sheep_bird', 'Bird', 'üê¶', 'sheep_emoji', 'normal', 70),
('sheep_octopus', 'Octopus', 'üêô', 'sheep_emoji', 'normal', 70),
('sheep_badger', 'Badger', 'ü¶°', 'sheep_emoji', 'normal', 70),
('sheep_skunk', 'Skunk', 'ü¶®', 'sheep_emoji', 'normal', 70),
('sheep_ladybug', 'Ladybug', 'üêû', 'sheep_emoji', 'normal', 70),
('sheep_trex', 'T-Rex', 'ü¶ñ', 'sheep_emoji', 'normal', 70),
('sheep_parrot', 'Parrot', 'ü¶ú', 'sheep_emoji', 'normal', 70),
('sheep_butterfly', 'Butterfly', 'ü¶ã', 'sheep_emoji', 'normal', 70),
('sheep_unicorn', 'Unicorn', 'ü¶Ñ', 'sheep_emoji', 'normal', 70),

-- Epic sheep emojis (100 gems)
('sheep_snail', 'Snail', 'üêå', 'sheep_emoji', 'epic', 100),
('sheep_phoenix', 'Phoenix', 'üê¶‚Äçüî•', 'sheep_emoji', 'epic', 100),
('sheep_peacock', 'Peacock', 'ü¶ö', 'sheep_emoji', 'epic', 100),
('sheep_ant', 'Ant', 'üêú', 'sheep_emoji', 'epic', 100),
('sheep_shrimp', 'Shrimp', 'ü¶ê', 'sheep_emoji', 'epic', 100),
('sheep_carousel', 'Carousel Horse', 'üé†', 'sheep_emoji', 'epic', 100),
('sheep_poodle', 'Poodle', 'üê©', 'sheep_emoji', 'epic', 100),

-- Legendary sheep emojis (box only)
('sheep_ram', 'Ram', 'üêè', 'sheep_emoji', 'legendary', 0),
('sheep_bee', 'Bee', 'üêù', 'sheep_emoji', 'legendary', 0),
('sheep_penguin', 'Penguin', 'üêß', 'sheep_emoji', 'legendary', 0),

-- Free particles
('particle_star_outline', 'Star Outline', '‚úß', 'particle', 'free', 0),
('particle_star_filled', 'Star Filled', '‚úÆ', 'particle', 'free', 0),

-- Normal particles (40 gems)
('particle_star_black', 'Black Star', '‚òÖ', 'particle', 'normal', 40),
('particle_star_six', 'Six Point Star', '‚ú¶', 'particle', 'normal', 40),
('particle_star_eight', 'Eight Point Star', '‚ú∞', 'particle', 'normal', 40),
('particle_star_pinwheel', 'Pinwheel Star', '‚úØ', 'particle', 'normal', 40),
('particle_star_sparkle', 'Sparkle', '‚ú¥', 'particle', 'normal', 40),
('particle_shell_symbol', 'Shell Symbol', 'ìáº', 'particle', 'normal', 40),

-- Normal particles (80 gems)
('particle_heart_outline', 'Heart Outline', '‚ô°', 'particle', 'normal', 80),
('particle_star_spark', 'Star Spark', '‚öù', 'particle', 'normal', 80),
('particle_heart_filled', 'Heart Filled', '‚ô•Ô∏é', 'particle', 'normal', 80),
('particle_star_circle', 'Star Circle', '‚ú™', 'particle', 'normal', 80),
('particle_flower', 'Flower', '‚ùÄ', 'particle', 'normal', 80),
('particle_circle_dot', 'Circle Dot', '‚èæ', 'particle', 'normal', 80),

-- Epic particles (120 gems)
('particle_music_note', 'Music Note', '‚ô™', 'particle', 'epic', 120),
('particle_music_notes', 'Music Notes', '‚ô´', 'particle', 'epic', 120),
('particle_star_crescent', 'Star Crescent', 'ñ¶π', 'particle', 'epic', 120),
('particle_lightning', 'Lightning', 'üó≤', 'particle', 'epic', 120),
('particle_coffee', 'Coffee', '‚òïÔ∏é', 'particle', 'epic', 120),
('particle_cloud', 'Cloud', '‚òÅÔ∏é', 'particle', 'epic', 120),

-- Legendary particles (box only)
('particle_biohazard', 'Biohazard', '‚ò£Ô∏é', 'particle', 'legendary', 0),
('particle_atom', 'Atom', '‚öõ', 'particle', 'legendary', 0),
('particle_treble_clef', 'Treble Clef', 'ùÑû', 'particle', 'legendary', 0),
('particle_warning', 'Warning', '‚ö†Ô∏é', 'particle', 'legendary', 0),
('particle_power', 'Power', '‚èª', 'particle', 'legendary', 0)

ON CONFLICT (id) DO NOTHING;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_user_collectibles_user_id ON user_collectibles(user_id);
CREATE INDEX IF NOT EXISTS idx_embroidered_boxes_user_id ON embroidered_boxes(user_id);
CREATE INDEX IF NOT EXISTS idx_collectibles_type_rarity ON collectibles(type, rarity);